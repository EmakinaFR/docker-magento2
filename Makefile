# This Makefile is designed to be included by another Makefile located in your project directory.
# ==> https://github.com/EmakinaFR/docker-magento2/wiki/Makefile

PHP_SERVICE := docker-compose exec php sh -c

# Define a static project name that will be prepended to each service name
export COMPOSE_PROJECT_NAME := magento2

# Extract environment variables needed by the environment
export PROJECT_LOCATION := $(shell echo ${MAKEFILE_DIRECTORY})
export DOCKER_PHP_IMAGE := $(shell grep DOCKER_PHP_IMAGE ${MAKEFILE_DIRECTORY}docker/local/.env | awk -F '=' '{print $$NF}')

##
## ----------------------------------------------------------------------------
##   Environment
## ----------------------------------------------------------------------------
##

backup: ## Backup the "mysql" volume
	docker run --rm \
		--volumes-from $$(docker-compose ps -q mysql) \
		--volume $$(pwd):/backup \
		busybox sh -c "tar cvf /backup/backup.tar /var/lib/mysql"

build: ## Build the environment
	docker-compose build --pull

cache: ## Flush cache stored in Redis
	docker-compose exec redis sh -c "redis-cli -n 1 FLUSHDB"
	docker-compose exec redis sh -c "redis-cli -n 2 FLUSHDB"

composer: ## Install Composer dependencies from the "php" container
	$(PHP_SERVICE) "composer install --optimize-autoloader --prefer-dist --working-dir=/var/www/html"

copy-in: ## Copy project files in the "app" volume
	docker run --rm \
		--volume ${COMPOSE_PROJECT_NAME}_appcode:/var/www/html/ \
		--volume ${PROJECT_LOCATION}:/project \
		alpine \
		sh -c "\
			apk add --no-cache rsync && \
			rsync -avh --delete --progress --no-perms --stats \
				--exclude=./.git/ \
				--exclude=./app/code/ \
				--exclude=./app/design/ \
				--exclude=./app/etc/ \
				--exclude=./dev/ \
				--exclude=./generated/ \
				--exclude=./m2-hotfixes/ \
				--exclude=./pub/media/ \
				--exclude=./pub/static/ \
				--exclude=./var/ \
				--exclude=./composer.json \
				--exclude=./composer.lock \
				--exclude=./yarn.lock \
				/project/ /var/www/html/ \
		"
	docker-compose exec php sh -c "chown -R www-data:root /var/www/html"

copy-out: ## Copy project dependencies out the "app" volume
	docker run --rm \
		--volume ${COMPOSE_PROJECT_NAME}_appcode:/var/www/html/ \
		--volume ${PROJECT_LOCATION}:/project \
		alpine \
		sh -c "\
			apk add --no-cache rsync && \
			rsync -avh --delete --progress --no-perms --stats --list-only \
				--include='/node_modules/' \
				--include='/vendor/' \
				--exclude='/*' \
				/var/www/html/ /project/ \
		"

logs: ## Follow logs generated by all containers
	docker-compose logs -f --tail=0

logs-full: ## Follow logs generated by all containers from the containers creation
	docker-compose logs -f

mysql: ## Open a terminal in the "mysql" container
	docker-compose exec mysql sh

nginx: ## Open a terminal in the "nginx" container
	docker-compose exec nginx sh

php: ## Open a terminal in the "php" container
	docker-compose exec -u www-data:root php sh -l

ps: ## List all containers managed by the environment
	docker-compose ps

restart: stop start ## Restart the environment

restore: ## Restore the "mysql" volume
	docker run --rm \
		--volumes-from $$(docker-compose ps -q mysql) \
		--volume $$(pwd):/backup \
		busybox sh -c "tar xvf /backup/backup.tar var/lib/mysql/"
	docker-compose restart mysql

start: ## Start the environment
	docker-compose up -d --remove-orphans

stats: ## Print real-time statistics about containers ressources usage
	docker stats $(docker ps --format={{.Names}})

stop: ## Stop the environment
	docker-compose stop

yarn: ## Install Composer dependencies from the "php" container
	$(PHP_SERVICE) "yarn install --cwd=/var/www/html"

.PHONY: backup build cache composer copy-in logs logs-full nginx php ps restart restore start stats stop yarn

.DEFAULT_GOAL := help
help:
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| sed -e 's/^.*Makefile://g' \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'
.PHONY: help
